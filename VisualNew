import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from matplotlib.ticker import MaxNLocator
from typing import Dict, Tuple

class NutrientVisualizer:
    """A class to create professional nutrient intake visualizations."""
    
    def __init__(self):
        self.style_config = {
            'figure.facecolor': 'white',
            'axes.facecolor': 'white',
            'axes.edgecolor': '#333333',
            'axes.labelcolor': '#333333',
            'axes.spines.top': False,
            'axes.spines.right': False,
            'xtick.color': '#333333',
            'ytick.color': '#333333',
            'text.color': '#333333',
            'font.family': 'sans-serif',
            'font.sans-serif': ['Arial', 'Helvetica', 'DejaVu Sans']
        }
        
        self.nutrient_colors = {
            'Added Sugars (g)': '#FF9999',
            'Calcium (mg)': '#99CCFF',
            'Calories': '#FFB366',
            'Cholesterol (mg)': '#FF99CC',
            'Dietary Fiber (g)': '#99FF99',
            'Iron (mg)': '#FF6666',
            'Magnesium (mg)': '#CC99FF',
            'Omega-3 Fatty Acids (g)': '#66B2FF',
            'Potassium (mg)': '#FFCC99',
            'Probiotics (CFUs)': '#FF99FF',
            'Protein (g)': '#99FFCC',
            'Saturated Fat (g)': '#FFFF99',
            'Sodium (mg)': '#99FFFF',
            'Total Carbohydrate (g)': '#FFB399',
            'Total Fat (g)': '#FF99B3',
            'Total Sugars (g)': '#FF8080',
            'Trans Fat (g)': '#FF6666',
            'Vitamin B12 (mcg)': '#80FF80',
            'Vitamin B6 (%DV)': '#80FF99',
            'Vitamin C (%DV)': '#FF8080',
            'Vitamin D3 (IU)': '#FFFF80',
            'Zinc (mg)': '#8080FF'
        }

    def _apply_style(self) -> None:
        """Apply professional style settings to the plot."""
        plt.style.use('seaborn-v0_8-whitegrid')
        for param, value in self.style_config.items():
            plt.rcParams[param] = value

    def _create_adjustment_curve(self, ax: plt.Axes, start_point: Tuple[float, float], 
                               target_value: float, color: str) -> None:
        """Create a smooth adjustment curve with improved aesthetics."""
        start_x, start_y = start_point
        x1 = np.linspace(start_x, 1, 50)
        x2 = np.linspace(1, 2, 50)
        
        # Create smooth bezier curve for first segment
        y1 = start_y + (target_value - start_y) * (1 - np.cos(np.pi * (x1 - start_x) / 2))
        y2 = np.full_like(x2, target_value)
        
        x = np.concatenate([x1, x2])
        y = np.concatenate([y1, y2])
        
        ax.plot(x, y, color=color, linestyle='--', linewidth=1.5, alpha=0.7)

    def _format_axis(self, ax: plt.Axes, title: str, max_value: float) -> None:
        """Apply professional formatting to chart axes."""
        ax.set_title(title, fontsize=10, pad=10, fontweight='bold')
        ax.set_ylabel('Amount', fontsize=8, labelpad=5)
        ax.tick_params(axis='both', labelsize=7)
        ax.yaxis.set_major_locator(MaxNLocator(5))
        
        # Handle edge cases for axis limits
        if np.isnan(max_value) or np.isinf(max_value) or max_value == 0:
            ax.set_ylim(0, 1)  # Set default limits if invalid values
        else:
            ax.set_ylim(0, max_value * 1.2)
            
        ax.grid(True, axis='y', linestyle='--', alpha=0.3)

    def _parse_adjustment(self, adjustment_str: str) -> Tuple[float, str]:
        """Parse adjustment string to extract value and action."""
        if pd.isna(adjustment_str):
            return 0, 'None'
        
        parts = adjustment_str.split(' ')
        value = float(parts[2])
        action = parts[0]
        return value, action

    def visualize(self, csv_file_intake: str, csv_file_adjustment: str, 
                 charts_per_row: int = 5, fig_height_per_row: int = 3) -> None:
        """Create a professional visualization of nutrient intake and adjustments."""
        self._apply_style()
        
        # Load and process data
        intake_data = pd.read_csv(csv_file_intake)
        adjustment_data = pd.read_csv(csv_file_adjustment)
        
        # Handle missing values in intake data
        intake_data = intake_data.fillna(0)
        
        # Merge datasets
        combined_data = pd.merge(intake_data, adjustment_data, on='Nutrient', how='left')
        combined_data.set_index('Nutrient', inplace=True)
        
        # Setup figure layout
        total_charts = len(combined_data)
        rows = (total_charts + charts_per_row - 1) // charts_per_row
        fig, axes = plt.subplots(rows, charts_per_row, 
                                figsize=(15, rows * fig_height_per_row),
                                gridspec_kw={'hspace': 0.8, 'wspace': 0.4})
        axes = axes.flatten()
        
        # Create individual charts
        for i, (nutrient, row) in enumerate(combined_data.iterrows()):
            ax = axes[i]
            nutrient_color = self.nutrient_colors.get(nutrient, '#808080')
            
            # Get bar values and handle NaN/Inf
            intake = row.get('Intake', 0) if not np.isnan(row.get('Intake', 0)) else 0
            min_rdi = row.get('Min RDI', 0) if not np.isnan(row.get('Min RDI', 0)) else 0
            max_rdi = row.get('Max RDI', 0) if not np.isnan(row.get('Max RDI', 0)) else 0
            
            bar_values = [intake, min_rdi, max_rdi]
            bars = ax.bar(['Intake', 'Min RDI', 'Max RDI'], bar_values,
                         color=[nutrient_color, '#E6E6E6', '#CCCCCC'],
                         width=0.6, alpha=0.8)
            
            # Add value labels
            max_value = max(filter(lambda x: not np.isnan(x) and not np.isinf(x), bar_values + [1]))
            for bar in bars:
                height = bar.get_height()
                if not np.isnan(height) and not np.isinf(height):
                    ax.text(bar.get_x() + bar.get_width()/2, height,
                           f'{height:.1f}', ha='center', va='bottom',
                           fontsize=7, color='#333333')
            
            # Add adjustment curve if needed
            if pd.notna(row.get('Adjustment')):
                adjustment_value, action = self._parse_adjustment(row['Adjustment'])
                adjustment_color = '#2ECC71' if action == 'Increase' else '#E74C3C'
                
                target_value = (intake + adjustment_value 
                              if action == 'Increase' 
                              else intake - adjustment_value)
                
                if not np.isnan(target_value) and not np.isinf(target_value):
                    self._create_adjustment_curve(ax, (0, intake), 
                                               target_value, adjustment_color)
                    
                    # Add adjustment label
                    ax.text(0.5, (intake + target_value)/2,
                           f'{adjustment_value:+.1f}', ha='center', va='bottom',
                           fontsize=7, color=adjustment_color)
            
            self._format_axis(ax, nutrient, max_value)
        
        # Hide unused subplots
        for j in range(total_charts, len(axes)):
            axes[j].axis('off')
        
        # Add title and adjust layout
        fig.suptitle('Nutrient Intake Analysis', fontsize=14, y=1.02, fontweight='bold')
        fig.text(0.5, 0.02, 'Nutrient Categories', ha='center', fontsize=12)
        plt.tight_layout()
        
        return fig

if __name__ == "__main__":
    visualizer = NutrientVisualizer()
    visualizer.visualize('nutrient_intake_results.csv', 'ideal_adjustments.csv')
    plt.show()
